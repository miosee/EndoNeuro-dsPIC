Configuration de l'adresse IP
https://howchoo.com/pi/configure-static-ip-address-raspberry-pi
sudo nano /etc/dhcpcd.conf

interface eth0
static ip_address=10.0.0.1
static routers=10.0.0.254




Installation de cmake
https://nickcullen.net/blog/raspberry-pi-tutorials/raspberry-pi-c-using-cmake/
	• sudo apt install cmake

Installation d'openCV
https://pimylifeup.com/raspberry-pi-opencv/
	• sudo apt install libjpeg-dev libtiff-dev libjasper-dev libpng-dev libwebp-dev libopenexr-dev
	• sudo apt install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libxvidcore-dev libx264-dev libdc1394-22-dev libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev
	• sudo apt install libgtk-3-dev libqtgui4 libqtwebkit4 libqt4-test python3-pyqt5
	• sudo apt install libatlas-base-dev liblapacke-dev gfortran
	• sudo apt install libhdf5-dev libhdf5-103
	• sudo apt install python3-dev python3-pip python3-numpy
Augmentation du swap
	• sudo nano /etc/dphys-swapfile
		○ While we are within this file, we need to find and replace the following line:
		CONF_SWAPSIZE=100
		With
		CONF_SWAPSIZE=2048
		○ Once changed, save the file by pressing CTRL+X followed by Y then Enter.
		○ We need to restart its service by utilizing the command below
			sudo systemctl restart dphys-swapfile
	
	• git clone https://github.com/opencv/opencv.git
	• git clone https://github.com/opencv/opencv_contrib.git
	
	As these repositories are quite large, they may take some time to clone to your Raspberry Pi.
	Compiling OpenCV on your Raspberry Pi
	
	1. Let’s start by creating a directory called “build” within the cloned “opencv” folder and then changing the working directory to it.
	
	 mkdir ~/opencv/build
	cd ~/opencv/build
	
	In this folder, we will be compiling OpenCV on your Raspberry Pi.
	
	2. Now that we are within our newly created build folder, we can now use cmake to prepare OpenCV for compilation on our Raspberry Pi.
	
	Run the following command to generate the required makefile.
	
	cmake -D CMAKE_BUILD_TYPE=RELEASE \
	    -D CMAKE_INSTALL_PREFIX=/usr/local \
	    -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \
	    -D ENABLE_NEON=ON \
	    -D ENABLE_VFPV3=ON \
	    -D BUILD_TESTS=OFF \
	    -D INSTALL_PYTHON_EXAMPLES=OFF \
	    -D OPENCV_ENABLE_NONFREE=ON \
	    -D CMAKE_SHARED_LINKER_FLAGS=-latomic \
	    -D BUILD_EXAMPLES=OFF ..
	
	3. Once the make file has successfully finished generating, we can now finally move on to compiling OpenCV by running the command below.
	
	We use the argument -j$(nproc) to tell the compiler to run a compiler for each of the available processors.
	
	Doing this will significantly speed up the compilation process and allow each core on the Raspberry Pi to work on compiling OpenCV.
	
	make -j$(nproc)
	
	Please note that the compilation process can take considerable time. On our Raspberry Pi 4, this process took about 1 hour to complete.
	
	4. When the compilation process finishes, we can then move on to installing OpenCV.
	
	Luckily for us, this is a reasonably straightforward process and requires you to run the following command.
	
	sudo make install
	
	This command will copy all the required files into there needed locations automatically.
	
	5. Now we also need to regenerate the operating systems library link cache.
	
	The Raspberry Pi won’t be able to find our OpenCV installation if we don’t run the following command.
	
	sudo ldconfig
	
	Cleaning up after Compilation
	
	1. Now that we have finished compiling OpenCV, we no longer need to have such a large swap file.
	
	Let’s again edit the swap file configuration by using the following command.
	
	sudo nano /etc/dphys-swapfile
	
	2. Within this file, you need to find and change the following line.
	
	Find
	
	CONF_SWAPSIZE=2048
	
	Replace With
	
	CONF_SWAPSIZE=100
	
	When done, save the file by pressing CTRL+X followed by Y then Enter.
	
	3. Now our final cleanup task requires us to restart the swap file service.
	
	Restarting the service will downsize the file from 2GB to 100 MB.
	
	sudo systemctl restart dphys-swapfile
	
	Testing OpenCV on your Raspberry Pi
	
	1. To test whether OpenCV is now installed to our Raspberry Pi, we will make use of our Python 3 installation.
	
	Launch into the Python terminal by running the command below.
	
	python3
	
	2. While we are within Python, we can now import the OpenCV Python module using the command below.
	
	By importing the module, we can first check to see if OpenCV will even load on our Pi.
	
	import cv2
	
	3. With the OpenCV module now imported, we should be able to retrieve its version.
	
	To retrieve OpenCV’s version, use the following command.
	
	cv2.__version__
	
	4. If everything is now working as intended and OpenCV has been successfully installed to your Raspberry Pi, you should see text like the following appear in the command line.
	
	'4.1.2'
	
	Hopefully, at this point you will now have OpenCV up and running.
	
	If you have run into any issues or have any feedback on this Raspberry Pi OpenCV tutorial, then feel free to drop a comment below.
	Get tutorials delivered to your inbox weekly.
	Arduino ADXL345 AccelerometerArduino Accelerometer using the ADXL345
	configuring ufwConfiguring Firewall Rules using UFW
	Raspberry Pi Music ServerDIY Raspberry Pi Music Player
	Raspberry Pi AndroidHow to Setup Android on the Raspberry Pi using EmteriaOS
	shutdown command in linuxUsing the shutdown Command in Linux
	Variables in PythonVariables in Python
	10 Comments
	
	    Avatar for alem
	    alem on October 17, 2020 at 6:22 am
	
	    Thank you so much. This tutorial was so helpful in the process of installing openCV on Raspberry PI 4
	
	Avatar for Aurimas
	Aurimas on June 1, 2020 at 10:40 am
	
	Thanks man! Works perfect.
	It took about 3h to finish on RPi 3b+
	Avatar for Alexander Warren
	Alexander Warren on April 22, 2020 at 11:46 am
	
	Hi, in step 6 it says to run `sudo apt install libhdf5-dev libhdf5-103`, however when running that I get the response `E: Unable to locate package libhdf5-103`. After doing `apt search libhdf5-103`, it seems like that package doesn’t exist? Do you have any ideas on how to fix this problem? Thanks.
	Avatar for Emmet
	Emmet on May 6, 2020 at 2:14 pm
	
	    Hi Alexander,
	
	    Make sure that you are running Raspbian Buster or later. I’m uncertain if those packages are available on older versions of Raspbian.
	
	    Cheers,
	    Emmet
	
	Avatar for Lionel Vigier
	Lionel Vigier on April 4, 2020 at 11:47 pm
	
	Hi,
	I have just installed cv2 using you tutorial. It works fine. Thank you very much
	Regards
	Avatar for Stephane Laurin
	Stephane Laurin on March 30, 2020 at 1:26 pm
	
	I get this erro message on the last commands. Everything else, I’ve followed. RPY-4 w/ 4GRAM… CV2 still not working!
	pi@raspberrypi:~/opencv/build $ python3
	Python 3.7.3 (default, Dec 20 2019, 18:57:59)
	[GCC 8.3.0] on linux
	Type “help”, “copyright”, “credits” or “license” for more information.
	>>> import cv2
	Traceback (most recent call last):
	File “”, line 1, in
	File “/home/pi/.local/lib/python3.7/site-packages/cv2/__init__.py”, line 3, in
	from .cv2 import *
	ImportError: /home/pi/.local/lib/python3.7/site-packages/cv2/cv2.cpython-37m-arm-linux-gnueabihf.so: undefined symbol: __atomic_fetch_add_8
	Avatar for Emmet
	Emmet on April 1, 2020 at 2:27 pm
	
	    Hi Stephane,
	
	    I re-ran this tutorial last night on a Raspberry Pi running Raspbian Buster and everything compiled and installed correctly.
	
	    Make sure you do not have the pip version of OpenCV installed before running this tutorial.
	
	    Cheers,
	    Emmet
	
	Avatar for matoboor
	matoboor on March 17, 2020 at 11:34 pm
	
	Thanks for nice tutorial. Worked like a charm.
	Avatar for Guilherme
	Guilherme on December 27, 2019 at 9:22 am
	
	Hello!
	Very good tutorial. Just a small typo in the last portion of it:
	sudo apt install pytohn3-dev python3-pip python3-numpy
	
	the install says ” pytohn3-dev”, when it should actually be “python3-dev” .
	
	Thanks for the tutorial!
	Guilherme
	Avatar for Gus
	Gus on December 27, 2019 at 2:00 pm
	
	        Hi Guilherme,
	
	        I have fixed the typo! Thanks for pointing that out.
	
	Leave a Reply
	
	Your email address will not be published. Required fields are marked *
	
	Name *
	
	Email *
	
	Notify me of follow-up comments by email.
	
	Go Ad-Free Sidebar
	Trending
	nano text editor guideGuide to the nano Text Editor
	Raspberry Pi BOINCRaspberry Pi BOINC Tutorial
	File Permissions in Linux ThumbnailThe Basics of File Permissions in Linux


--------------------

Installation de la librairie BCM2835

wget http://www.airspayce.com/mikem/bcm2835/bcm2835-1.68.tar.gz 
tar xvfz bcm2835-1.68.tar.gz
cd bcm2835-1.68
./configure
make
sudo make install
